service: my-video-chat
# app: my-video-chat
# org: mpmaia

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    CONTACTS_TABLE: ${self:service}-contacts-${self:provider.stage}
    USERS_TABLE: ${self:service}-users-${self:provider.stage}
    CONNECTIONS_TABLE: ${self:service}-connections-${self:provider.stage}
    USER_ID_INDEX: UserIdIndex
    USER_EMAIL_INDEX: UserIdIndex
    # CONFIGURE THE ITEMS BELOW FOR YOUR ENVIRONMENT BELOW
    USER_POOL: arn:aws:cognito-idp:us-east-1:************:userpool/us-east-1_dk8prY4fv
    JWKS_URL: https://cognito-idp.{region}.amazonaws.com/{userPoolId}/.well-known/jwks.json

  tracing:
    lambda: true
    apiGateway: true

  logs:
    websocket: true

  websocketsApiName: video-chat-websocket-api
  websocketsApiRouteSelectionExpression: $request.body.action

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - codedeploy:*
            - logs:*
          Resource:
            - '*'

#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:

  AuthWS:
    handler: src/auth/wsAuthorizer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cloudwatch:PutMetricData
        Resource: '*'

  GetContacts:
    handler: src/lambda/getContacts.handler
    events:
      - http:
          method: get
          cors: true
          path: contacts
          authorizer:
            arn: ${self:provider.environment.USER_POOL}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  AddContact:
    handler: src/lambda/addContact.handler
    events:
      - http:
          method: post
          path: contacts
          cors: true
          authorizer:
            arn: ${self:provider.environment.USER_POOL}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/${self:provider.environment.USER_EMAIL_INDEX}

  CreateUser:
    handler: src/lambda/createUser.handler
    events:
      - http:
          method: get
          path: user
          cors: true
          authorizer:
            arn: ${self:provider.environment.USER_POOL}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}

  DeleteContact:
    handler: src/lambda/deleteContact.handler
    events:
      - http:
          method: delete
          path: contacts/{contactId}
          cors: true
          authorizer:
            arn: ${self:provider.environment.USER_POOL}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONTACTS_TABLE}/index/${self:provider.environment.USER_ID_INDEX}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

  connectionHandler:
    handler: src/lambda/webSocket.handler
    events:
      - websocket:
          route: $connect
          authorizer:
            name: AuthWS
            identitySource:
              - 'route.request.querystring.Auth'
      - websocket:
          route: $disconnect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
          - execute-api:Invoke
        Resource: arn:aws:execute-api:${self:provider.region}:*:*/${self:provider.stage}/*

  defaultHandler:
    handler: src/lambda/webSocket.defaultHandler
    events:
      - websocket:
          route: $default
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
      - Effect: Allow
        Action:
          - execute-api:ManageConnections
          - execute-api:Invoke
        Resource: arn:aws:execute-api:${self:provider.region}:*:*/${self:provider.stage}/*

resources:
  - ${file(./serverless-api-gateway.yml)}
  - ${file(./serverless-dynamo.yml)}
